# buildout.cfg file for Plone 4 development work
# - for production installations please use http://plone.org/download
# Each part has more information about its recipe on PyPi
# http://pypi.python.org/pypi
# ... just reach by the recipe name
[buildout]
parts =
    instance
    zopepy
    i18ndude
    test
    omelette
    varnish-build
    varnish
    supervisor
    templer

extends =
    http://dist.plone.org/release/4.3.2/versions.cfg

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/release/4.3.2
    http://dist.plone.org/thirdparty

extensions =
    mr.developer
    buildout.dumppickedversions
always-checkout = force
auto-checkout = *
sources = sources
versions = versions

# Reference any folders where you have Python egg source code under development here
# e.g.: develop = src/my.package
# If you are using the mr.developer extension and have the source code in a
# repository mr.developer will handle this automatically for you
develop =

# Version pindowns for new style products go here - this section extends one provided in http://dist.plone.org/release/
[versions]
# plone.app.contenttypes fix:
plone.app.layout = 2.3.9
z3c.unconfigure = 1.0.1
plone.app.portlets = 2.5a1
Pygments = 1.6
#collective.portaltabs
#zope.testing = 4.1.2

# Create bin/instance command to manage Zope start up and shutdown
[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
debug-mode = off
verbose-security = on
blob-storage = var/blobstorage
environment-vars =
    PTS_LANGUAGES en de
    zope_i18n_compile_mo_files true
eggs =
	Plone
    liqd.ypart_policy
    liqd.senat_policy
zcml =
    liqd.ypart_policy

# zopepy commands allows you to execute Python scripts using a PYTHONPATH
# including all the configured eggs
[zopepy]
recipe = zc.recipe.egg
eggs = ${instance:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/i18ndude command
[i18ndude]
unzip = true
recipe = zc.recipe.egg
eggs = i18ndude

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    adhocracy.plone[test]
    liqd.contenttypes[test]
    liqd.policy[test]
    liqd.ypart_policy[test]
    liqd.ypart_theme[test]
    liqd.senat_policy[test]
    liqd.senat_dummy_theme[test]

# Put your mr.developer managed source code repositories here, see
# http://pypi.python.org/pypi/mr.developer for details on format for this part
[sources]
adhocracy.plone = git ssh://git@foucault.liqd.net:22012/adhocracy.plone.git
liqd.ypart_policy = git ssh://git@foucault.liqd.net:22012/liqd.ypart_policy.git
liqd.ypart_theme = git ssh://git@foucault.liqd.net:22012/liqd.ypart_theme.git 
liqd.contenttypes = git ssh://git@foucault.liqd.net:22012/liqd.contenttypes.git
liqd.policy = git ssh://git@foucault.liqd.net:22012/liqd.policy.git
liqd.senat_policy = git ssh://git@foucault.liqd.net:22012/liqd.senat_policy.git
liqd.senat_dummy_theme = git ssh://git@foucault.liqd.net:22012/liqd.senat_dummy_theme.git
templer.plone = git https://github.com/collective/templer.plone.git
templer.localcommands = git https://github.com/collective/templer.localcommands.git
templer.plone.localcommands = git https://github.com/collective/templer.plone.localcommands.git
templer.buildout = git https://github.com/collective/templer.buildout.git
templer.core = git https://github.com/collective/templer.core.git
templer.zope = git https://github.com/collective/templer.zope.git

# Create bin/templer to generate python package skeletons 
[templer]
recipe = zc.recipe.egg
eggs = templer.plone[localcommands]
dependent-scripts = true
scripts= templer

# Create a unified directory structure of installed packages
[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}

# compile varnish reverse proxy cache
[varnish-build]
recipe = zc.recipe.cmmi
url = ${varnish:download-url}

# setup varnish
[varnish]
recipe = plone.recipe.varnish
varnish_version = 3
download-url = http://repo.varnish-cache.org/source/varnish-3.0.5.tar.gz
daemon = ${buildout:parts-directory}/varnish-build/sbin/varnishd
mode = foreground
bind = 0.0.0.0:8000
backends = 127.0.0.1:8080
cache-size = 256M
vcl_recv = 
    if (req.url == "/PURGE_ALL" && req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 "Not allowed.";
        }
        ban("req.url ~ /");
        error 200 "Cached Cleared Successfully.";
    }



[supervisor]
recipe = collective.recipe.supervisor
programs =
    10 plone (redirect_stderr=true stdout_logfile=var/log/plone.log stderr_logfile=NONE) ${buildout:directory}/bin/instance [console] ${buildout:directory} true
   20 varnish (redirect_stderr=true stdout_logfile=var/log/varnish.log stderr_logfile=NONE) ${buildout:bin-directory}/varnish
